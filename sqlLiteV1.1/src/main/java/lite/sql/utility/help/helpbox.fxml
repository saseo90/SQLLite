<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import java.lang.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.layout.VBox?>

<VBox alignment="CENTER" prefHeight="637.0" prefWidth="503.0"
	xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1"
	fx:controller="lite.sql.utility.help.HelpboxController">
	<children>
		<TextArea fx:id="textHelp" prefHeight="604.0" prefWidth="503.0"
			text="&#10;&#10;   * 테이블 생성&#10;      *  CREATE TABLE [테이블명]&#10;          (&#10;                  [컬럼명1]   [컬럼타입]   [default],&#10;                  [컬럼명2]   [컬럼타입]   [default],&#10;                  CONSTRAINT      인덱스키명     PRIMARY KEY(컬럼명)          --기본키 설정 &#10;           )&#10;         &#10;   * 테이블 삭제&#10;      * DROP TABLE 테이블명&#10;      &#10;   * 테이블 변경 - ALTER&#10;      * 테이블 컬럼추가 &#10;         - ALTER TABLE [테이블명]   ADD ( COLUMN명 TYPE  [DEFAULT value], ... )&#10;&#10;      * 테이블 컬럼변경&#10;         - ALTER TABLE [테이블명]   MODIFY ( COLUMN명 TYPE [DEFAULT value], ... )&#10;&#10;      * KEY 설정&#10;         - ALTER TABLE [테이블명]   &#10;                              ADD (&#10;                               --기본키 :  CONSTRAINT 인덱스키명 PRIMARY KEY (컬럼명),&#10;                               --참조키 :  CONSTRAINT 외래키명 FOREIGN KEY (컬럼명)   REFERENCES 외부테이블명(외부컬럼명)&#10;                                       )&#10;&#10;      * 테이블 컬럼삭제 &#10;         - ALTER TABLE [TABLE명]  DROP COLUMN명&#10;&#10;&#10;   * 데이터 조회&#10;         - SELECT  *  FROM  테이블명&#10;         - SELECT   컬럼명    FROM  테이블명   WHERE  조건 &#10;&#10;   * 데이터 추가 &#10;      - INSERT INTO 테이블명 ( 컬럼명 ,  ...  ) VALUES  ( 값 , ... ) &#10;&#10;   * 데이터 수정&#10;      - UPDATE   [테이블명]    SET  [컬럼명 = 값1]    WHERE    [조건]   &#10;&#10;   * 데이터 삭제 &#10;      - DELETE   FROM [테이블명]    WHERE    [조건]   &#10;&#10;&#10;   * WHERE &#10;      - BETWEEN : 범위내의 모든 값 조회 &#10;         - WHERE 컬럼명 BETWEEN A AND B&#10;      - LIKE : 지정된 패턴과 비교하여 검색 &#10;         - WHERE 컬럼명 LIKE   '패턴'&#10;         - WHERE 컬럼명 NOT LIKE   '패턴'&#10;                - % : 여러 문자&#10;                - _ : 한 문자&#10;      - 비교  &#10;         - A = B   &#10;         - A &lt;&gt; B   -- 다르다&#10;         - A &lt; B  ,  A &gt; B   &#10;         - A &lt;= B  ,  A &gt;= B&#10;&#10;   * 함수 &#10;      -  문자열 &#10;         - 둘 이상 문자열 연결  :  C || C&#10;         - 두 문자열 연결  : CONCAT( C , C )&#10;         - LOWER  ,  UPPER  : 해당 문자나 문자열을 소문자, 대문자로 반환&#10;         - INITCAP  :  첫 글자만 대문자로 반환 &#10;         - SUBSTR(c, m, [n]) : c문자열의 m위치부터 길이 n만큼 문자 리턴&#10;                          m이 음수이면 뒤쪽부터 처리한다.&#10;         - REPLACE(c1, c2, [c3]) : c1에 포함된 c2문자를 c3값으로 치환.&#10;                             c3가 없는 경우 찾은 문자를 제거한다.&#10;         - INSTR( c1,  c2,  [m , [n] ] )  :  c1문자열에서 c2문자가 처음 나타나는 위치 리턴 ( m은 시작위치, n은 n번째)&#10;         - LENGTH  :  문자열의 길이를 리턴&#10;&#10;      - 숫자열 &#10;         - ROUND ( n,  | )  :  지정된 자릿수 ( | ) 밑에서 반올림  - 숫자의 반올림 :  ROUND ( 컬럼명, 위치 )&#10;         - TRUNC ( n, | )  :  지정된 자릿수 ( | )  밑에서 절삭&#10;         - MOD ( c , n )  :  n으로 나눈 나머지&#10;         - FLOOR ( n ) : n 과 같거나 작은 수 중에 가장 큰 정수 &#10;         - CEIL ( n )  :  n 과 같거나 큰 수 중에 가장 작은 정수&#10;         - WIDTH_BUCKET  :  min에서 max의 범위로 설정하고 b 구간으로 나누어 c 가 어느 구간에 속하는지 리턴&#10;&#10;      - 날짜열 &#10;         - SYSDATE : 시스템에서 제공하는 현재 날짜와 시간 값&#10;         - EXTRACT(fmt FROM date) : 날짜에서 필요한 부분만 추출 (fmt=YEAR, MONTH, DAT, HOUR, MINUTE, SECOND)&#10;&#10;      - 형변환 &#10;         - TO_CHAR   : 숫자, 문자, 날짜를 지정한 형식의 문자열 반환&#10;         - TO_NUMBER : 숫자형식의 문자열을 숫자로 반환  &#10;         - TO_DATE : 날짜형식의 문자열을 날짜로 반환&#10;&#10;      - NULL &#10;         - IS NULL, IS NOT NULL : NULL값인지 아닌지 비교&#10;         - NVL(c, r) : c가 NULL이 아니면 c값으로, NULL이면 r 반환&#10;&#10;      - 기타 &#10;         - DECODE  :  조건문&#10;                SELECT DECODE ( 조건식 {[, 검색, 결과]} [, default] ) FROM DUAL -&gt;조건식 : 연산결과가 int형범위의 정수값&#10;         &#10;         - CASE WHEN : 연속적인 조건문&#10;                SELECT CASE WHEN 조건식 THEN 결과 .. ELSE 결과 END FROM   DUAL&#10;      - GROUP&#10;            - 집계함수(밑 함수)를 제외한 SELECT절에 기술된 컬럼명들은 모두 GROUP BY 절에 기술해야한다.   &#10;         - AVG ( [DISTINCT] [ALL] 컬럼명 )  :  조회 범위 내 해당 컬럼들의 평균값&#10;            - DISTINCT  :  중복된 값은 제외&#10;            - ALL  :  default로 모든 값을 포함&#10;         - COUNT ( 컬럼명 )  :  조회 범위 내 해당 컬럼 들의 자료수&#10;         - MAX ( 컬럼명 )  :  조회 범위 내 해당 컬럼들 중 최대 값&#10;         - MIN ( 컬럼명 )  :  조회 범위 내 해당 컬럼들 중 최소 값&#10;         - SUM ( 컬럼명 )  :  조회 범위 내 해당 컬럼들의 합계&#10;&#10;   * TABLE JOIN &#10;      - SELECT   테이블명.컬럼명,  테이블명.컬럼명   FROM   테이블명1, 테이블명2  WHERE   테이블명1.컬럼명 = 테이블명2.컬럼명&#10;      - SELECT   테이블명.컬럼명,  테이블명.컬럼명   FROM   테이블명1  INNER JOIN 테이블명2 ON (테이블명1.컬럼명 = 테이블명2.컬럼명) &#10;         - 조건식은 서로 관계있는 컬럼명을 연결해줘야 한다.&#10;         &#10;   * TABLE JOIN ( 조건식을 만족시키지 못하는 데이터도 검색 ) &#10;      - SELECT   테이블명.컬럼명,  테이블명.컬럼명   FROM  테이블명1, 테이블명2  WHERE  테이블명1.컬럼명 = 테이블명2.컬럼명(+) &#10;         - 누락된 ROW가 포함된 쪽에 (+) 연산자를 사용한다. NULL행을 생성한다.&#10;      - SELECT   테이블명.컬럼명,  테이블명.컬럼명   FROM  테이블명1 ( LEFT, RIGHT, FULL )  테이블명2   WHERE 테이블명1.컬럼명 = 테이블명2.컬럼명 &#10;         - 모든 행이 검색되어야 할 테이블의 위치를 기준으로 한다.&#10;&#10;&#10;   - HAVING절 &#10;      - GROUP BY에서만 사용 가능 , GROUP 함수에 조건을 줄 수 있다.&#10;      - SELECT 컬럼명 ... FROM 테이블명 ... GROUP BY 컬럼명 .. HAVING  그룹조건식&#10;&#10;   - 서브쿼리 &#10;      - SQL 구문안에 또 다른 SELECT 구문이 있는것.  &#10;         - ANY  :  서브쿼리 결과값 중 하나의 값이라도 만족이 되면 결과값 반환&#10;         - ALL  :  서브쿼리 결과값 중 모든 결과 값이 만족 되어야 하는 결과값 반환&#10;         - EXISTS  :  서브쿼리의 데이터가 존재하는 값들만을 결과로 반환&#10;&#10;   - SET (집합) &#10;      - 여러 테이블의 내용을 한 테이블처럼 조회&#10;      - SELECT문의 컬럼들의 DATE TYPE과 컬럼수는 동일&#10;      - SELECT ... FROM ... WHERE  [ SET ]  SELECT ... FROM ... WHERE ... &#10;         - UNION  :  합집합&#10;         - UNION ALL  :  공통원소 두번씩 포함한 합집합&#10;         - INTERSECT  :  교집합&#10;         - MINUS  :  차집합" />
		<Button fx:id="btnClose" mnemonicParsing="false" prefHeight="36.0"
			prefWidth="85.0" text="닫기" />
	</children>
</VBox>
